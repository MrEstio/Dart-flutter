import 'dart:ffi';

import 'package:dart_application_1/dart_application_1.dart' as dart_application_1;

void main() {
// Переменные 
int a = 52; // Целочисленные значения размером не более 64 бит
  print(a);
double b = 1.2; // 64-разрядные числа с плавающей запятой
print(b);
String c = 'буквы'; // содержит последовательность единиц кода UTF-16
print(c);
bool d = false; // логические литералы true и false
print(d);

Runes input = Runes('\u041F\u0440\u0438\u0432\u0435\u0442'); // показывают последовательность символов в юникоде
    Runes text = Runes('Привет');
    print(text);

var z = 5; // var сам определяет тип переменной (var = изменчивый)
print(z);

dynamic dyn = 'jerry'; // Данный оператор, как и var, позволяет вывести тип переменной исходя из присвоенного ей значения. 
print(dyn); // Но в отличие от var, dynamic позволяет изменять тип переменной.
dyn = 23;
print(dyn);



// КОЛЛЕКЦИИ

// Класс Map представляет коллекцию элементов, где каждый элемент имеет ключ и значение.
// Коллекция пар ключ / значение, из которых вы извлекаете значение, используя связанный с ним ключ.
var map = {
        1: "Tom",
        2: "Bob",
        3: "Sam"
};
// эквивалентное определение Map
Map<int, String> map2 = {
        1: "Tom",
        2: "Bob",
        3: "Sam"
};
print(map2);

List x = [1, 2, 3]; // массив, или упорядоченная группа объектов
print(x);

Set v = {'Jenni', 'Liza', 'Vlad'}; // неупорядоченная коллекция уникальных предметов.
print(v);

// Константы
    const con1 = "Tom";
    print(con1);    // Tom
    //con1 =  "Bob";    // Ошибка - значение константы нельзя изменять!
     final fin1 = "Tom";
    print(fin1);    // Tom
    //fin1 =  "Bob";    // Ошибка - значение константы нельзя изменять!
    // Главное различие между const и final состоит в том, что значение const должно быть определено при компиляции,
    // А значение константы final определяется во время выполнения. 

// Null safety
    String? name; // оператор "?" показывает что может быть либо null либо string 
    print(name);
    name = "Alex"; // Можно явно присвоить null ( вместо alex )
    print(name);
  
  // Оператор ?? - при присвоении переменной значений выполнит проверку на null.

   int? num1 = 23;
    int num2 = num1; // Если значение num1 (значение слева от оператора ??) не равно null, 
    print(num2);        // то оператор возвращает именно это значение num1. 
     // Если же это значение равно null, то оператор ?? возвращает значение num2 (справа от оператора).
    num1 = null;
    num2 = num1 ?? 0;
    print(num2);        // 0
  // Оператор !
    // В некоторых ситуациях переменная может быь определена как переменная nullable-типа,
    // тем не менее при этом могут быть исключены ситуации, что данная переменная будет хранить null.
    // И если мы точно уверены, что эта переменная в процессе работы программы не получит значение null, 
    // то в этом случае мы можем принимать оператор !, который ставится после названия переменной:
  int? acx = 23;
    int bxx = acx!; // мы уверены, что acx не равна null
    print(bxx);     

// Арифметические операции
  //++ (префиксный инкремент) / так же есть -- (префиксный декремент)
  // Предполагает увеличение переменной на единицу, например, z=++y 
  // (вначале значение переменной y увеличивается на 1, а затем ее значение присваивается переменной z)
int acv = 8;
int bcv = ++acv;
print(acv);   // 9
print(bcv);
  // ++ (постфиксный инкремент) /  так же есть -- (постфиксный декремент)
  // Также представляет увеличение переменной на единицу, например, z=y++ 
  // (вначале значение переменной y присваивается переменной z, а потом значение переменной y увеличивается на 1)
int afg = 8;
int bfg = afg++;
print(afg);   // 9
print(bfg);   // 8
}